apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
  template:
    metadata:
      labels:
        app: httpbin
    spec:
      containers:
        - name: httpbin
          image: kennethreitz/httpbin
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  selector:
    app: httpbin
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
apiVersion: v1
data:
  httpbin-oas.json: |-
    {
      "openapi": "3.0.1",
      "info": {
        "title": "httpbin.org",
        "version": "0.9.2"
      },
      "servers": [
        {
          "url": "https://httpbin.org/"
        }
      ],
      "tags": [
        {
          "name": "HTTP Methods",
          "description": "Testing different HTTP verbs"
        },
        {
          "name": "Auth",
          "description": "Auth methods"
        },
        {
          "name": "Status codes",
          "description": "Generates responses with given status code"
        },
        {
          "name": "Request inspection",
          "description": "Inspect the request data"
        },
        {
          "name": "Response inspection",
          "description": "Inspect the response data like caching and headers"
        },
        {
          "name": "Response formats",
          "description": "Returns responses in different data formats"
        },
        {
          "name": "Dynamic data",
          "description": "Generates random and dynamic data"
        },
        {
          "name": "Cookies",
          "description": "Creates, reads and deletes Cookies"
        },
        {
          "name": "Images",
          "description": "Returns different image formats"
        },
        {
          "name": "Redirects",
          "description": "Returns different redirect responses"
        },
        {
          "name": "Anything",
          "description": "Returns anything that is passed to request"
        }
      ],
      "paths": {
        "/absolute-redirect/{n}": {
          "get": {
            "tags": [
              "Redirects"
            ],
            "summary": "Absolutely 302 Redirects n times.",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "number"
                }
              }
            ],
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          }
        },
        "/anything": {
          "get": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "patch": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          }
        },
        "/anything/{anything}": {
          "parameters": [
            {
              "name": "anything",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "get": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          },
          "patch": {
            "tags": [
              "Anything"
            ],
            "summary": "Returns anything passed in request data.",
            "responses": {
              "200": {
                "description": "Anything passed in request",
                "content": {}
              }
            }
          }
        },
        "/base64/{value}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Decodes base64url-encoded string.",
            "parameters": [
              {
                "name": "value",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "default": "SFRUUEJJTiBpcyBhd2Vzb21l"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Decoded base64 content.",
                "content": {}
              }
            }
          }
        },
        "/basic-auth/{user}/{passwd}": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using HTTP Basic Auth.",
            "parameters": [
              {
                "name": "user",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "passwd",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "401": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/bearer": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using bearer authentication.",
            "parameters": [
              {
                "name": "Authorization",
                "in": "header",
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "401": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/brotli": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns Brotli-encoded data.",
            "responses": {
              "200": {
                "description": "Brotli-encoded data.",
                "content": {}
              }
            }
          }
        },
        "/bytes/{n}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns n random bytes generated with given seed",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Bytes.",
                "content": {}
              }
            }
          }
        },
        "/cache": {
          "get": {
            "tags": [
              "Response inspection"
            ],
            "summary": "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
            "parameters": [
              {
                "name": "If-Modified-Since",
                "in": "header",
                "schema": {}
              },
              {
                "name": "If-None-Match",
                "in": "header",
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Cached response",
                "content": {}
              },
              "304": {
                "description": "Modified",
                "content": {}
              }
            }
          }
        },
        "/cache/{value}": {
          "get": {
            "tags": [
              "Response inspection"
            ],
            "summary": "Sets a Cache-Control header for n seconds.",
            "parameters": [
              {
                "name": "value",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "integer"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Cache control set",
                "content": {}
              }
            }
          }
        },
        "/cookies": {
          "get": {
            "tags": [
              "Cookies"
            ],
            "summary": "Returns cookie data.",
            "responses": {
              "200": {
                "description": "Set cookies.",
                "content": {}
              }
            }
          }
        },
        "/cookies/delete": {
          "get": {
            "tags": [
              "Cookies"
            ],
            "summary": "Deletes cookie(s) as provided by the query string and redirects to cookie list.",
            "parameters": [
              {
                "name": "freeform",
                "in": "query",
                "allowEmptyValue": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Redirect to cookie list",
                "content": {}
              }
            }
          }
        },
        "/cookies/set": {
          "get": {
            "tags": [
              "Cookies"
            ],
            "summary": "Sets cookie(s) as provided by the query string and redirects to cookie list.",
            "parameters": [
              {
                "name": "freeform",
                "in": "query",
                "allowEmptyValue": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Redirect to cookie list",
                "content": {}
              }
            }
          }
        },
        "/cookies/set/{name}/{value}": {
          "get": {
            "tags": [
              "Cookies"
            ],
            "summary": "Sets a cookie and redirects to cookie list.",
            "parameters": [
              {
                "name": "name",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Set cookies and redirects to cookie list.",
                "content": {}
              }
            }
          }
        },
        "/deflate": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns Deflate-encoded data.",
            "responses": {
              "200": {
                "description": "Defalte-encoded data.",
                "content": {}
              }
            }
          }
        },
        "/delay/{delay}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns a delayed response (max of 10 seconds).",
            "parameters": [
              {
                "name": "delay",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "A delayed response.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns a delayed response (max of 10 seconds).",
            "parameters": [
              {
                "name": "delay",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "A delayed response.",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns a delayed response (max of 10 seconds).",
            "parameters": [
              {
                "name": "delay",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "A delayed response.",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns a delayed response (max of 10 seconds).",
            "parameters": [
              {
                "name": "delay",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "A delayed response.",
                "content": {}
              }
            }
          },
          "patch": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Returns a delayed response (max of 10 seconds).",
            "parameters": [
              {
                "name": "delay",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "A delayed response.",
                "content": {}
              }
            }
          }
        },
        "/delete": {
          "delete": {
            "tags": [
              "HTTP Methods"
            ],
            "summary": "The request's DELETE parameters.",
            "responses": {
              "200": {
                "description": "The request's DELETE parameters.",
                "content": {}
              }
            }
          }
        },
        "/deny": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns page denied by robots.txt rules.",
            "responses": {
              "200": {
                "description": "Denied message",
                "content": {}
              }
            }
          }
        },
        "/digest-auth/{qop}/{user}/{passwd}": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using Digest Auth.",
            "parameters": [
              {
                "name": "qop",
                "in": "path",
                "description": "auth or auth-int",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "user",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "passwd",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "401": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/digest-auth/{qop}/{user}/{passwd}/{algorithm}": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using Digest Auth + Algorithm.",
            "parameters": [
              {
                "name": "qop",
                "in": "path",
                "description": "auth or auth-int",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "user",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "passwd",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "algorithm",
                "in": "path",
                "description": "MD5, SHA-256, SHA-512",
                "required": true,
                "schema": {
                  "type": "string",
                  "default": "MD5"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "401": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using Digest Auth + Algorithm.",
            "description": "allow settings the stale_after argument.\n",
            "parameters": [
              {
                "name": "qop",
                "in": "path",
                "description": "auth or auth-int",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "user",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "passwd",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "algorithm",
                "in": "path",
                "description": "MD5, SHA-256, SHA-512",
                "required": true,
                "schema": {
                  "type": "string",
                  "default": "MD5"
                }
              },
              {
                "name": "stale_after",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "default": "never"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "401": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/drip": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Drips data over a duration after an optional initial delay.",
            "parameters": [
              {
                "name": "duration",
                "in": "query",
                "description": "The amount of time (in seconds) over which to drip each byte",
                "schema": {
                  "type": "number",
                  "default": 2
                }
              },
              {
                "name": "numbytes",
                "in": "query",
                "description": "The number of bytes to respond with",
                "schema": {
                  "type": "integer",
                  "default": 10
                }
              },
              {
                "name": "code",
                "in": "query",
                "description": "The response code that will be returned",
                "schema": {
                  "type": "integer",
                  "default": 200
                }
              },
              {
                "name": "delay",
                "in": "query",
                "description": "The amount of time (in seconds) to delay before responding",
                "schema": {
                  "type": "number",
                  "default": 2
                }
              }
            ],
            "responses": {
              "200": {
                "description": "A dripped response.",
                "content": {}
              }
            }
          }
        },
        "/encoding/utf8": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns a UTF-8 encoded body.",
            "responses": {
              "200": {
                "description": "Encoded UTF-8 content.",
                "content": {}
              }
            }
          }
        },
        "/etag/{etag}": {
          "get": {
            "tags": [
              "Response inspection"
            ],
            "summary": "Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.",
            "parameters": [
              {
                "name": "etag",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "If-None-Match",
                "in": "header",
                "schema": {}
              },
              {
                "name": "If-Match",
                "in": "header",
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Normal response",
                "content": {}
              },
              "412": {
                "description": "match",
                "content": {}
              }
            }
          }
        },
        "/get": {
          "get": {
            "tags": [
              "HTTP Methods"
            ],
            "summary": "The request's query parameters.",
            "responses": {
              "200": {
                "description": "The request's query parameters.",
                "content": {}
              }
            }
          }
        },
        "/gzip": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns GZip-encoded data.",
            "responses": {
              "200": {
                "description": "GZip-encoded data.",
                "content": {}
              }
            }
          }
        },
        "/headers": {
          "get": {
            "tags": [
              "Request inspection"
            ],
            "summary": "Return the incoming request's HTTP headers.",
            "responses": {
              "200": {
                "description": "The request's headers.",
                "content": {}
              }
            }
          }
        },
        "/hidden-basic-auth/{user}/{passwd}": {
          "get": {
            "tags": [
              "Auth"
            ],
            "summary": "Prompts the user for authorization using HTTP Basic Auth.",
            "parameters": [
              {
                "name": "user",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "passwd",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Sucessful authentication.",
                "content": {}
              },
              "404": {
                "description": "Unsuccessful authentication.",
                "content": {}
              }
            }
          }
        },
        "/html": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns a simple HTML document.",
            "responses": {
              "200": {
                "description": "An HTML page.",
                "content": {}
              }
            }
          }
        },
        "/image": {
          "get": {
            "tags": [
              "Images"
            ],
            "summary": "Returns a simple image of the type suggest by the Accept header.",
            "responses": {
              "200": {
                "description": "An image.",
                "content": {}
              }
            }
          }
        },
        "/image/jpeg": {
          "get": {
            "tags": [
              "Images"
            ],
            "summary": "Returns a simple JPEG image.",
            "responses": {
              "200": {
                "description": "A JPEG image.",
                "content": {}
              }
            }
          }
        },
        "/image/png": {
          "get": {
            "tags": [
              "Images"
            ],
            "summary": "Returns a simple PNG image.",
            "responses": {
              "200": {
                "description": "A PNG image.",
                "content": {}
              }
            }
          }
        },
        "/image/svg": {
          "get": {
            "tags": [
              "Images"
            ],
            "summary": "Returns a simple SVG image.",
            "responses": {
              "200": {
                "description": "An SVG image.",
                "content": {}
              }
            }
          }
        },
        "/image/webp": {
          "get": {
            "tags": [
              "Images"
            ],
            "summary": "Returns a simple WEBP image.",
            "responses": {
              "200": {
                "description": "A WEBP image.",
                "content": {}
              }
            }
          }
        },
        "/ip": {
          "get": {
            "tags": [
              "Request inspection"
            ],
            "summary": "Returns the requester's IP Address.",
            "responses": {
              "200": {
                "description": "The Requester's IP Address.",
                "content": {}
              }
            }
          }
        },
        "/json": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns a simple JSON document.",
            "responses": {
              "200": {
                "description": "An JSON document.",
                "content": {}
              }
            }
          }
        },
        "/links/{n}/{offset}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Generate a page containing n links to other pages which do the same.",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              },
              {
                "name": "offset",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "HTML links.",
                "content": {}
              }
            }
          }
        },
        "/patch": {
          "patch": {
            "tags": [
              "HTTP Methods"
            ],
            "summary": "The request's PATCH parameters.",
            "responses": {
              "200": {
                "description": "The request's PATCH parameters.",
                "content": {}
              }
            }
          }
        },
        "/post": {
          "post": {
            "tags": [
              "HTTP Methods"
            ],
            "summary": "The request's POST parameters.",
            "responses": {
              "200": {
                "description": "The request's POST parameters.",
                "content": {}
              }
            }
          }
        },
        "/put": {
          "put": {
            "tags": [
              "HTTP Methods"
            ],
            "summary": "The request's PUT parameters.",
            "responses": {
              "200": {
                "description": "The request's PUT parameters.",
                "content": {}
              }
            }
          }
        },
        "/range/{numbytes}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Streams n random bytes generated with given seed, at given chunk size per packet.",
            "parameters": [
              {
                "name": "numbytes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Bytes.",
                "content": {}
              }
            }
          }
        },
        "/redirect-to": {
          "get": {
            "tags": [
              "Redirects"
            ],
            "summary": "302/3XX Redirects to the given URL.",
            "parameters": [
              {
                "name": "url",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "status_code",
                "in": "query",
                "schema": {}
              }
            ],
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Redirects"
            ],
            "summary": "302/3XX Redirects to the given URL.",
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "required": [
                      "url"
                    ],
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "status_code": {}
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Redirects"
            ],
            "summary": "302/3XX Redirects to the given URL.",
            "requestBody": {
              "content": {
                "multipart/form-data": {
                  "schema": {
                    "required": [
                      "url"
                    ],
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "status_code": {}
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Redirects"
            ],
            "summary": "302/3XX Redirects to the given URL.",
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          },
          "patch": {
            "tags": [
              "Redirects"
            ],
            "summary": "302/3XX Redirects to the given URL.",
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          }
        },
        "/redirect/{n}": {
          "get": {
            "tags": [
              "Redirects"
            ],
            "summary": "302 Redirects n times.",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          }
        },
        "/relative-redirect/{n}": {
          "get": {
            "tags": [
              "Redirects"
            ],
            "summary": "Relatively 302 Redirects n times.",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "302": {
                "description": "A redirection.",
                "content": {}
              }
            }
          }
        },
        "/response-headers": {
          "get": {
            "tags": [
              "Response inspection"
            ],
            "summary": "Returns a set of response headers from the query string.",
            "parameters": [
              {
                "name": "freeform",
                "in": "query",
                "allowEmptyValue": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Response headers",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Response inspection"
            ],
            "summary": "Returns a set of response headers from the query string.",
            "parameters": [
              {
                "name": "freeform",
                "in": "query",
                "allowEmptyValue": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Response headers",
                "content": {}
              }
            }
          }
        },
        "/robots.txt": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns some robots.txt rules.",
            "responses": {
              "200": {
                "description": "Robots file",
                "content": {}
              }
            }
          }
        },
        "/status/{codes}": {
          "get": {
            "tags": [
              "Status codes"
            ],
            "summary": "Return status code or random status code if more than one are given",
            "parameters": [
              {
                "name": "codes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "100": {
                "description": "Informational responses",
                "content": {}
              },
              "200": {
                "description": "Success",
                "content": {}
              },
              "300": {
                "description": "Redirection",
                "content": {}
              },
              "400": {
                "description": "Client Errors",
                "content": {}
              },
              "500": {
                "description": "Server Errors",
                "content": {}
              }
            }
          },
          "put": {
            "tags": [
              "Status codes"
            ],
            "summary": "Return status code or random status code if more than one are given",
            "parameters": [
              {
                "name": "codes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "100": {
                "description": "Informational responses",
                "content": {}
              },
              "200": {
                "description": "Success",
                "content": {}
              },
              "300": {
                "description": "Redirection",
                "content": {}
              },
              "400": {
                "description": "Client Errors",
                "content": {}
              },
              "500": {
                "description": "Server Errors",
                "content": {}
              }
            }
          },
          "post": {
            "tags": [
              "Status codes"
            ],
            "summary": "Return status code or random status code if more than one are given",
            "parameters": [
              {
                "name": "codes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "100": {
                "description": "Informational responses",
                "content": {}
              },
              "200": {
                "description": "Success",
                "content": {}
              },
              "300": {
                "description": "Redirection",
                "content": {}
              },
              "400": {
                "description": "Client Errors",
                "content": {}
              },
              "500": {
                "description": "Server Errors",
                "content": {}
              }
            }
          },
          "delete": {
            "tags": [
              "Status codes"
            ],
            "summary": "Return status code or random status code if more than one are given",
            "parameters": [
              {
                "name": "codes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "100": {
                "description": "Informational responses",
                "content": {}
              },
              "200": {
                "description": "Success",
                "content": {}
              },
              "300": {
                "description": "Redirection",
                "content": {}
              },
              "400": {
                "description": "Client Errors",
                "content": {}
              },
              "500": {
                "description": "Server Errors",
                "content": {}
              }
            }
          },
          "patch": {
            "tags": [
              "Status codes"
            ],
            "summary": "Return status code or random status code if more than one are given",
            "parameters": [
              {
                "name": "codes",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "100": {
                "description": "Informational responses",
                "content": {}
              },
              "200": {
                "description": "Success",
                "content": {}
              },
              "300": {
                "description": "Redirection",
                "content": {}
              },
              "400": {
                "description": "Client Errors",
                "content": {}
              },
              "500": {
                "description": "Server Errors",
                "content": {}
              }
            }
          }
        },
        "/stream-bytes/{n}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Streams n random bytes generated with given seed, at given chunk size per packet.",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Bytes.",
                "content": {}
              }
            }
          }
        },
        "/stream/{n}": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Stream n JSON responses",
            "parameters": [
              {
                "name": "n",
                "in": "path",
                "required": true,
                "schema": {}
              }
            ],
            "responses": {
              "200": {
                "description": "Streamed JSON responses.",
                "content": {}
              }
            }
          }
        },
        "/user-agent": {
          "get": {
            "tags": [
              "Request inspection"
            ],
            "summary": "Return the incoming requests's User-Agent header.",
            "responses": {
              "200": {
                "description": "The request's User-Agent header.",
                "content": {}
              }
            }
          }
        },
        "/uuid": {
          "get": {
            "tags": [
              "Dynamic data"
            ],
            "summary": "Return a UUID4.",
            "responses": {
              "200": {
                "description": "A UUID4.",
                "content": {}
              }
            }
          }
        },
        "/xml": {
          "get": {
            "tags": [
              "Response formats"
            ],
            "summary": "Returns a simple XML document.",
            "responses": {
              "200": {
                "description": "An XML document.",
                "content": {}
              }
            }
          }
        }
      },
      "components": {},
      "x-tyk-api-gateway": {
        "info": {
          "id": "httpbin",
          "name": "httpbin",
          "state": {
            "active": true
          }
        },
        "upstream": {
          "url": "http://httpbin.default.svc"
        },
        "server": {
          "listenPath": {
            "value": "/httpbin/",
            "strip": true
          }
        }
      },
      "x-original-swagger-version": "2.0"
    }
  httpbin.json: |-
    {
      "name": "httpbin",
      "slug": "",
      "listen_port": 0,
      "protocol": "",
      "enable_proxy_protocol": false,
      "api_id": "httpbin",
      "org_id": "",
      "use_keyless": true,
      "use_oauth2": false,
      "external_oauth": {
        "enabled": false,
        "providers": null
      },
      "use_openid": false,
      "openid_options": {
        "providers": null,
        "segregate_by_client": false
      },
      "oauth_meta": {
        "allowed_access_types": null,
        "allowed_authorize_types": null,
        "auth_login_redirect": ""
      },
      "auth": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "auth_configs": {},
      "use_basic_auth": false,
      "basic_auth": {
        "disable_caching": false,
        "cache_ttl": 0,
        "extract_from_body": false,
        "body_user_regexp": "",
        "body_password_regexp": ""
      },
      "use_mutual_tls_auth": false,
      "client_certificates": null,
      "upstream_certificates": null,
      "upstream_certificates_disabled": true,
      "pinned_public_keys": null,
      "certificate_pinning_disabled": true,
      "enable_jwt": false,
      "use_standard_auth": false,
      "use_go_plugin_auth": false,
      "enable_coprocess_auth": false,
      "custom_plugin_auth_enabled": false,
      "jwt_signing_method": "",
      "jwt_source": "",
      "jwt_jwks_uris": null,
      "jwt_identity_base_field": "",
      "jwt_client_base_field": "",
      "jwt_policy_field_name": "",
      "jwt_default_policies": null,
      "jwt_issued_at_validation_skew": 0,
      "jwt_expires_at_validation_skew": 0,
      "jwt_not_before_validation_skew": 0,
      "jwt_skip_kid": false,
      "scopes": {
        "jwt": {},
        "oidc": {}
      },
      "idp_client_id_mapping_disabled": false,
      "jwt_scope_to_policy_mapping": null,
      "jwt_scope_claim_name": "",
      "notifications": {
        "shared_secret": "",
        "oauth_on_keychange_url": ""
      },
      "enable_signature_checking": false,
      "hmac_allowed_clock_skew": 0,
      "hmac_allowed_algorithms": null,
      "request_signing": {
        "is_enabled": false,
        "secret": "",
        "key_id": "",
        "algorithm": "",
        "header_list": null,
        "certificate_id": "",
        "signature_header": ""
      },
      "base_identity_provided_by": "",
      "definition": {
        "enabled": false,
        "name": "",
        "default": "",
        "location": "",
        "key": "",
        "strip_path": false,
        "strip_versioning_data": false,
        "url_versioning_pattern": "",
        "fallback_to_default": false,
        "versions": null
      },
      "version_data": {
        "not_versioned": true,
        "default_version": "",
        "versions": {
          "": {
            "name": "",
            "expires": "",
            "paths": {
              "ignored": null,
              "white_list": null,
              "black_list": null
            },
            "use_extended_paths": true,
            "extended_paths": {
              "persist_graphql": null,
              "rate_limit": null
            },
            "global_headers": {},
            "global_headers_remove": null,
            "global_headers_disabled": true,
            "global_response_headers": {},
            "global_response_headers_remove": null,
            "global_response_headers_disabled": true,
            "ignore_endpoint_case": false,
            "global_size_limit": 0,
            "global_size_limit_disabled": true,
            "override_target": ""
          }
        }
      },
      "uptime_tests": {
        "disabled": true,
        "check_list": null,
        "config": {
          "expire_utime_after": 0,
          "service_discovery": {
            "use_discovery_service": false,
            "query_endpoint": "",
            "use_nested_query": false,
            "parent_data_path": "",
            "data_path": "",
            "port_data_path": "",
            "target_path": "",
            "use_target_list": false,
            "cache_disabled": true,
            "cache_timeout": 0,
            "endpoint_returns_list": false
          },
          "recheck_wait": 0
        }
      },
      "proxy": {
        "preserve_host_header": false,
        "listen_path": "/httpbin/",
        "target_url": "http://httpbin.default.svc",
        "disable_strip_slash": false,
        "strip_listen_path": true,
        "enable_load_balancing": false,
        "target_list": null,
        "check_host_against_uptime_tests": false,
        "service_discovery": {
          "use_discovery_service": false,
          "query_endpoint": "",
          "use_nested_query": false,
          "parent_data_path": "",
          "data_path": "",
          "port_data_path": "",
          "target_path": "",
          "use_target_list": false,
          "cache_disabled": true,
          "cache_timeout": 0,
          "endpoint_returns_list": false
        },
        "transport": {
          "ssl_insecure_skip_verify": false,
          "ssl_ciphers": null,
          "ssl_min_version": 0,
          "ssl_max_version": 0,
          "ssl_force_common_name_check": false,
          "proxy_url": ""
        }
      },
      "disable_rate_limit": false,
      "disable_quota": false,
      "custom_middleware": {
        "pre": null,
        "post": null,
        "post_key_auth": null,
        "auth_check": {
          "disabled": true,
          "name": "",
          "path": "",
          "require_session": false,
          "raw_body_only": false
        },
        "response": null,
        "driver": "",
        "id_extractor": {
          "disabled": true,
          "extract_from": "",
          "extract_with": "",
          "extractor_config": null
        }
      },
      "custom_middleware_bundle": "",
      "custom_middleware_bundle_disabled": true,
      "cache_options": {
        "cache_timeout": 0,
        "enable_cache": false,
        "cache_all_safe_requests": false,
        "cache_response_codes": null,
        "enable_upstream_cache_control": false,
        "cache_control_ttl_header": "",
        "cache_by_headers": null
      },
      "session_lifetime": 0,
      "active": true,
      "internal": false,
      "auth_provider": {
        "name": "",
        "storage_engine": "",
        "meta": null
      },
      "session_provider": {
        "name": "",
        "storage_engine": "",
        "meta": null
      },
      "event_handlers": {
        "events": {}
      },
      "enable_batch_request_support": false,
      "enable_ip_whitelisting": false,
      "allowed_ips": null,
      "enable_ip_blacklisting": false,
      "blacklisted_ips": null,
      "ip_access_control_disabled": true,
      "dont_set_quota_on_create": false,
      "expire_analytics_after": 0,
      "response_processors": null,
      "CORS": {
        "enable": false,
        "allowed_origins": null,
        "allowed_methods": null,
        "allowed_headers": null,
        "exposed_headers": null,
        "allow_credentials": false,
        "max_age": 0,
        "options_passthrough": false,
        "debug": false
      },
      "domain": "",
      "domain_disabled": true,
      "certificates": null,
      "do_not_track": true,
      "enable_context_vars": false,
      "config_data": null,
      "config_data_disabled": true,
      "tag_headers": null,
      "global_rate_limit": {
        "disabled": true,
        "rate": 0,
        "per": 0
      },
      "strip_auth_data": false,
      "enable_detailed_recording": false,
      "graphql": {
        "enabled": false,
        "execution_mode": "",
        "version": "",
        "schema": "",
        "type_field_configurations": null,
        "playground": {
          "enabled": false,
          "path": ""
        },
        "engine": {
          "field_configs": null,
          "data_sources": null,
          "global_headers": null
        },
        "proxy": {
          "features": {
            "use_immutable_headers": false
          },
          "auth_headers": null,
          "sse_use_post": false,
          "request_headers": null,
          "use_response_extensions": {
            "on_error_forwarding": false
          },
          "request_headers_rewrite": null
        },
        "subgraph": {
          "sdl": ""
        },
        "supergraph": {
          "subgraphs": null,
          "merged_sdl": "",
          "global_headers": null,
          "disable_query_batching": false
        },
        "introspection": {
          "disabled": false
        }
      },
      "analytics_plugin": {},
      "tags_disabled": true,
      "tags": null,
      "is_oas": true,
      "detailed_tracing": false,
      "upstream_auth": {
        "enabled": false,
        "basic_auth": {
          "username": "",
          "password": "",
          "header": {
            "enabled": false,
            "name": ""
          }
        },
        "oauth": {
          "enabled": false,
          "allowed_authorize_types": null,
          "client_credentials": {
            "client_id": "",
            "header": {
              "enabled": false,
              "name": ""
            },
            "token_url": ""
          },
          "password": {
            "client_id": "",
            "header": {
              "enabled": false,
              "name": ""
            },
            "username": "",
            "password": "",
            "token_url": ""
          }
        }
      }
    }
  keyless-api.json: |-
    {
      "name": "Tyk Test Keyless API",
      "api_id": "keyless",
      "org_id": "default",
      "definition": {
          "location": "header",
          "key": "version"
      },
      "use_keyless": true,
      "version_data": {
          "not_versioned": true,
          "versions": {
              "Default": {
                  "name": "Default"
              }
          }
      },
      "proxy": {
          "listen_path": "/keyless-test/",
          "target_url": "http://httpbin.default.svc",
          "strip_listen_path": true
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: tyk-httpbin-app
